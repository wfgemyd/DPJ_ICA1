
https://www.planttext.com


@startuml


skinparam packageStyle rectangle

title High-Level Class Diagram

package "com.myproject.mypart" {
    interface IEventListener {
        +onEvent(e: Event): void
    }

    class EventBus {
        -listeners: List<IEventListener>
        +getInstance(): EventBus
        +registerListener(listener: IEventListener)
        +notify(e: Event)
    }

    class Logger implements IEventListener {
        -instance: Logger
        +getInstance(): Logger
        +onEvent(e: Event)
    }

    abstract class Event {
        -time: long
        +getTime(): long
        +execute()
        +getDescription(): String
    }

    class TransmissionEvent extends Event {
        -packet: Packet
        -from: INetworkInterface
        -to: INetworkInterface
        -errorRate: double
        -roll: double
        +execute()
        +getDescription(): String
    }

    class EventScheduler {
        -eventQueue: PriorityQueue<Event>
        -currentTime: long
        +getInstance(): EventScheduler
        +schedule(e: Event)
        +getCurrentTime(): long
        +run()
    }

    interface INetworkInterface {
        +connect(m: IPhysicalMedium)
        +sendPacket(p: Packet)
        +receivePacket(p: Packet)
    }

    interface ILinkLayerProtocol {
        +encapsulate(payload: Packet): Packet
        +decapsulate(frame: Packet): Packet
    }

    interface INetworkLayerProtocol {
        +routePacket(p: Packet, srcIf: INetworkInterface)
        +getAddress(): String
    }

    interface IPhysicalMedium {
        +transmit(p: Packet, from: INetworkInterface, to: INetworkInterface)
        +setDelay(d: long)
        +setErrorRate(r: double)
    }

    class EthernetProtocol implements ILinkLayerProtocol {
        +encapsulate(payload: Packet): Packet
        +decapsulate(frame: Packet): Packet
    }

    class WiFiProtocol implements ILinkLayerProtocol {
        +encapsulate(payload: Packet): Packet
        +decapsulate(frame: Packet): Packet
    }

    class IPv4Protocol implements INetworkLayerProtocol {
        -ipAddress: String
        +routePacket(p: Packet, srcIf: INetworkInterface)
        +getAddress(): String
    }

    class IPv6Protocol implements INetworkLayerProtocol {
        -ipAddress: String
        +routePacket(p: Packet, srcIf: INetworkInterface)
        +getAddress(): String
    }

    class CableMedium implements IPhysicalMedium {
        -delay: long
        -errorRate: double
        +transmit(p: Packet, from: INetworkInterface, to: INetworkInterface)
        +setDelay(d: long)
        +setErrorRate(r: double)
    }

    class WirelessMedium implements IPhysicalMedium {
        -delay: long
        -errorRate: double
        +transmit(p: Packet, from: INetworkInterface, to: INetworkInterface)
        +setDelay(d: long)
        +setErrorRate(r: double)
    }

    class Packet {
        -data: String
        -headers: List<String>
        +addHeader(h: String)
        +removeHeader(h: String)
    }

    class Node {
        -name: String
        -interfaces: List<INetworkInterface>
        +addInterface(i: INetworkInterface)
        +getInterfaces(): List<INetworkInterface>
        +getName(): String
    }

    class PhysicalInterface implements INetworkInterface {
        -owner: Node
        -linkProtocol: ILinkLayerProtocol
        -networkProtocol: INetworkLayerProtocol
        -medium: IPhysicalMedium
        +connect(m: IPhysicalMedium)
        +sendPacket(p: Packet)
        +receivePacket(p: Packet)
        +getOwner(): Node
    }

    class TopologyManagerStaticMap {
        -routeMap: Map<String, INetworkInterface>
        +set(address: String, intf: INetworkInterface)
        +getTargetInterfaceFor(address: String): INetworkInterface
    }

    class MainSimulation {
        +main(args: String[])
    }

    ' Relationships
    EventBus --> IEventListener
    Logger --> EventBus : register as listener
    TransmissionEvent --> Packet
    TransmissionEvent --> INetworkInterface : from, to
    TransmissionEvent --> EventBus : notify()
    EventScheduler --> Event
    PhysicalInterface --> ILinkLayerProtocol
    PhysicalInterface --> INetworkLayerProtocol
    PhysicalInterface --> IPhysicalMedium
    Node "1" o--> "0..*" INetworkInterface
    Packet "1" o--> "0..*" String : headers
    TopologyManagerStaticMap --> INetworkInterface

    ' Observer Pattern:
    IEventListener <|.. Logger
    EventBus o--> IEventListener

    ' Strategy Pattern:
    INetworkInterface <|.. PhysicalInterface
    ILinkLayerProtocol <|.. EthernetProtocol
    ILinkLayerProtocol <|.. WiFiProtocol
    INetworkLayerProtocol <|.. IPv4Protocol
    INetworkLayerProtocol <|.. IPv6Protocol
    IPhysicalMedium <|.. CableMedium
    IPhysicalMedium <|.. WirelessMedium
}

' Decorator Pattern in com.myproject.hazmin
package "com.myproject.hazmin" {
    abstract class MediumDecorator implements com.myproject.mypart.IPhysicalMedium {
        -wrapped: com.myproject.mypart.IPhysicalMedium
    }

    class NoiseMediumDecorator extends MediumDecorator {
        -extraErrorRate: double
        +transmit(p: com.myproject.mypart.Packet, from: com.myproject.mypart.INetworkInterface, to: com.myproject.mypart.INetworkInterface)
    }

    MediumDecorator o-- com.myproject.mypart.IPhysicalMedium
    NoiseMediumDecorator --> com.myproject.mypart.IPhysicalMedium
}

' Abstract Factory Pattern in com.myproject.anna
package "com.myproject.anna" {
    interface ProtocolStackFactory {
        +createLinkLayer(): com.myproject.mypart.ILinkLayerProtocol
        +createNetworkLayer(): com.myproject.mypart.INetworkLayerProtocol
    }

    class BasicIPv4EthernetFactory implements ProtocolStackFactory {
        -ipAddress: String
        +createLinkLayer(): com.myproject.mypart.ILinkLayerProtocol
        +createNetworkLayer(): com.myproject.mypart.INetworkLayerProtocol
    }

    class AdvancedIPv6WiFiFactory implements ProtocolStackFactory {
        -ipAddress: String
        +createLinkLayer(): com.myproject.mypart.ILinkLayerProtocol
        +createNetworkLayer(): com.myproject.mypart.INetworkLayerProtocol
    }

    ProtocolStackFactory <|.. BasicIPv4EthernetFactory
    ProtocolStackFactory <|.. AdvancedIPv6WiFiFactory

    BasicIPv4EthernetFactory --> com.myproject.mypart.ILinkLayerProtocol
    BasicIPv4EthernetFactory --> com.myproject.mypart.INetworkLayerProtocol

    AdvancedIPv6WiFiFactory --> com.myproject.mypart.ILinkLayerProtocol
    AdvancedIPv6WiFiFactory --> com.myproject.mypart.INetworkLayerProtocol
}

@enduml
